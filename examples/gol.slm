use: "core";

w: s64 = 60;
h: s64 = 30;

main: () -> s64 = {
    array: [60 * 30]s64;
    i : s64 = 0;

    console_clear();
    console_cursor_reset();
    console_cursor_disable();

    set_cell(1, 0, ^array);
    set_cell(0, 2, ^array);
    set_cell(1, 2, ^array);
    set_cell(3, 1, ^array);
    set_cell(4, 2, ^array);
    set_cell(5, 2, ^array);
    set_cell(6, 2, ^array);

    i = 0;
    while i < 256 {
        draw(^array);
        step(^array);
        i = i + 1;
    }

    console_cursor_enable();
    return 0;
}

step: (array: ^s64) = {
    i : s64 = 0; 

    // cleaning state
    while i < w * h {
        x, y : s64 = i % w, i / w;
        cell : ^s64 = ^array[i];

        @cell = @cell & 0x80;
        i     = i + 1;
    }

    i = 0;

    // calculating neignbours
    while i < w * h {
        x, y : s64 = i % w, i / w;
        cell : ^s64 = ^array[i];

        @cell = @cell + check_neighbour(array, x - 1, y - 1);
        @cell = @cell + check_neighbour(array, x,     y - 1);
        @cell = @cell + check_neighbour(array, x + 1, y - 1);

        @cell = @cell + check_neighbour(array, x - 1, y);
        @cell = @cell + check_neighbour(array, x + 1, y);

        @cell = @cell + check_neighbour(array, x - 1, y + 1);
        @cell = @cell + check_neighbour(array, x,     y + 1);
        @cell = @cell + check_neighbour(array, x + 1, y + 1);
        i = i + 1;
    }

    i = 0;

    // calculating new state
    while i < w * h {
        x, y: s64 = i % w, i / w;

        cell : ^s64 = ^array[i];
        alive, n: b8, s64 = @cell & 0x80 >> 7, @cell & 0x7F;

        if alive && (n > 3 || n < 2) {
            @cell = 0x00;
        } else if alive || n == 3 {
            @cell = 0x80;
        }

        i = i + 1;
    }
}

check_neighbour: (array: ^s64, cx: s64, cy: s64) -> s64 = {
    if (cx >= 0 && cx < w) && (cy >= 0 && cy < h) {
        cell : s64 = array[cx + cy * w];
        if cell & 0x80 { return 1; }
    }

    return 0;
}

draw: (array: ^s64) = {
    console_cursor_reset();

    i : s64 = 0; 
    while i < w * h {
        x, y: s64 = i % w, i / w;

        cell: s64 = array[i] & 0x80;

        if cell {
            putchar(0x23);
            putchar(0x20);
        } else {
            putchar(0x2E);
            putchar(0x20);
        }

        if x == w - 1 {
            putchar(0x0A);
        }

        i = i + 1;
    }
}

set_cell: (x: s64, y: s64, array: ^s64) = {
    halfw: s64 = w / 2 - 3;
    halfh: s64 = h / 2 - 1;
    array[(halfw + x) + (halfh + y) * w] = 0x80;
}
