use: "core";

array: ^u8;
w: s64 = 60;
h: s64 = 30;

main: () -> s64 = {
    i : s64 = 0;

    console_clear();
    console_cursor_reset();

    while i < 256 {
        step();
        draw();
        i = i + 1;
    }

    return 0;
}

step: () = {
    i : s64 = 0; 

    // cleaning state
    while i < w * h {
        x, y : s64 = i % w, i / w;
        cell : ^u8 = array + x + y * w;
        @cell = @cell & 0x80;
        i = i + 1;
    }

    i = 0;

    // calculating neignbours
    while i < w * h {
        x, y : s64 = i % w, i / w;
        cell : ^u8 = array + x + y * w;

        @cell = @cell + check_neighbour(x, y, -1, -1);
        @cell = @cell + check_neighbour(x, y,  0, -1);
        @cell = @cell + check_neighbour(x, y,  1, -1);

        @cell = @cell + check_neighbour(x, y, -1,  0);
        @cell = @cell + check_neighbour(x, y,  1,  0);

        @cell = @cell + check_neighbour(x, y, -1,  1);
        @cell = @cell + check_neighbour(x, y,  0,  1);
        @cell = @cell + check_neighbour(x, y,  1,  1);

        i = i + 1;
    }

    i = 0;

    // calculating new state
    while i < w * h {
        x, y: s64 = i % w, i / w;
        cell: ^u8 = array + x + y * w;
        alive, n: b8, u8 = @cell & 0x80 >> 7, @cell & 0x7F;

        if alive && (n > 3 || n < 2) {
            @cell = 0x00;
        } if alive || n == 3 {
            @cell = 0x80;
        }

        i = i + 1;
    }
}

check_neighbour: (xo: s64, yo: s64, x: s64, y: s64) -> s64 = {
    if ((xo + x) > 0 && (xo + x) < w) 
    && ((yo + y) > 0 && (yo + y) < h) {
        offset : ^s64 = array + (xo + x) + (yo + y) * w;

        if @offset & 0x80 {
            return 1;
        }
    }

    return 0;
}

draw: () = {
    console_cursor_reset();

    i : s64 = 0; 
    while i < w * h {
        x, y : s64 = i % w, i / w;

        cell : u8 = @(array + i) | 0x80;

        if cell {
            putchar(0x23);
            putchar(0x20);
        } else {
            putchar(0x2E);
            putchar(0x20);
        }

        if x == w - 1 {
            putchar(0x0A); // '\n'
        }

        i = i + 1;
    }
}

