use: "core";

main: () -> s64 = {
    array: [60 * 30]u8;
    i : s64 = 0;

    console_clear();
    console_cursor_reset();

    w: s64 = 60;
    h: s64 = 30;

    halfw: s64 = w / 2 - 3;
    halfh: s64 = h / 2 - 1;

    @(^array + (halfw + 1) + (halfh + 0) * w) = 0x80;

    @(^array + (halfw + 0) + (halfh + 2) * w) = 0x80;
    @(^array + (halfw + 1) + (halfh + 2) * w) = 0x80;
    @(^array + (halfw + 3) + (halfh + 1) * w) = 0x80;

    @(^array + (halfw + 4) + (halfh + 2) * w) = 0x80;
    @(^array + (halfw + 5) + (halfh + 2) * w) = 0x80;
    @(^array + (halfw + 6) + (halfh + 2) * w) = 0x80;

    while i < 256 {
        draw(w, h, ^array);
        step(w, h, ^array);
        i = i + 1;
    }

    return 0;
}

step: (w: s64, h: s64, array: ^u8) = {
    i : s64 = 0; 

    // cleaning state
    while i < w * h {
        x, y : s64 = i % w, i / w;
        cell : ^u8 = array + i;

        @cell = @cell & 0x80;
        i     = i + 1;
    }

    i = 0;

    // calculating neignbours
    while i < w * h {
        x, y : s64 = i % w, i / w;
        cell : ^u8 = array + i;

        @cell = @cell + check_neighbour(array, w, h, x - 1, y - 1);
        @cell = @cell + check_neighbour(array, w, h, x,     y - 1);
        @cell = @cell + check_neighbour(array, w, h, x + 1, y - 1);

        @cell = @cell + check_neighbour(array, w, h, x - 1, y);
        @cell = @cell + check_neighbour(array, w, h, x + 1, y);

        @cell = @cell + check_neighbour(array, w, h, x - 1, y + 1);
        @cell = @cell + check_neighbour(array, w, h, x,     y + 1);
        @cell = @cell + check_neighbour(array, w, h, x + 1, y + 1);
        i = i + 1;
    }

    i = 0;

    // calculating new state
    while i < w * h {
        x, y: s64 = i % w, i / w;

        cell: ^u8 = array + i;
        alive, n: b8, u8 = @cell & 0x80 >> 7, @cell & 0x7F;

        if alive && (n > 3 || n < 2) {
            @cell = 0x00;
        } else if alive || n == 3 {
            @cell = 0x80;
        }

        i = i + 1;
    }
}

check_neighbour: (array: ^u8, w: s64, h: s64, cx: s64, cy: s64) -> s64 = {
    if (cx >= 0 && cx < w) && (cy >= 0 && cy < h) {
        cell : ^u8 = array + cx + cy * w;

        if @cell & 0x80 {
            debug_break();
            return 1;
        }
    }

    return 0;
}

draw: (w: s64, h: s64, array: ^u8) = {
    console_cursor_reset();

    i : s64 = 0; 
    while i < w * h {
        x, y: s64 = i % w, i / w;

        cell: u8 = @(array + i) & 0x80;

        if cell {
            putchar(0x23);
            putchar(0x20);
        } else {
            putchar(0x2E);
            putchar(0x20);
        }

        if x == w - 1 {
            putchar(0x0A); // '\n'
        }

        i = i + 1;
    }
}

